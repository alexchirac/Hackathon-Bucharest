/**
* This is an auto generated code. This code should not be modified since the file can be overwritten
* if new genezio commands are executed.
*/
import { Remote } from "./remote";
export class LocalStorageWrapper {
    setItem(key, value) {
        localStorage.setItem(key, value);
    }
    getItem(key) {
        return localStorage.getItem(key);
    }
    removeItem(key) {
        localStorage.removeItem(key);
    }
    clear() {
        localStorage.clear();
    }
}
export class AuthService {
    constructor() {
        this.remote = null;
        this.storage = null;
    }
    /**
     * @method getInstance
     * @description Method that returns an instance of the AuthService class. This method should be used instead of the constructor.
     * @returns {AuthService} An instance of the AuthService class.
     */
    static getInstance() {
        if (!this.instance) {
            this.instance = new AuthService();
            if (typeof process !== "undefined" && process.env != null && process.env.GNZ_AUTH_FUNCTION_URL != null) {
                const url = process.env.GNZ_AUTH_FUNCTION_URL;
                this.instance.remote = new Remote(url);
            }
            this.instance.storage = new LocalStorageWrapper();
        }
        return this.instance;
    }
    /**
     * @method setStorage
     * @description Method that sets the storage that will be used to store the token.
     * @param {Storage} storage - The storage that will be used to store the token.
     * @returns {void}
     */
    setStorage(storage) {
        this.storage = storage;
    }
    /**
     * @method setTokenAndRegion
     * @description Method that should be called before any other method. This method sets the token and region
     * that will be used to call the remote functions.
     * @param {string} token - The token provided in genezio dashboard.
     * @param {string} region - The region provided in genezio dashboard.
     * @returns {void}
     * @example
     * AuthService.getInstance().setTokenAndRegion("0-1234567890", "us-east-1")
     */
    setTokenAndRegion(token, region) {
        const [cloud, id] = token.split("-");
        let url;
        if (cloud === "0") {
            url = `https://${id}.lambda-url.${region}.on.aws/AuthService`;
        }
        else {
            throw new Error("Wrong token format. Check your token and try again");
        }
        this.remote = new Remote(url);
    }
    /**
     * @method register
     * @description Method that can be used to create a new user.
     *
     * @param {string} email The user's email.
     * @param {string} password The user's password.
     * @param {string} name The user's name. Optional.
     *
     * @returns {Promise<UserLoginResponse>} An object containing the user's information.
     * @throws {ErrorCode.MISSING_EMAIL_PARAMETER} If no email was provided.
     * @throws {ErrorCode.MISSING_PASSWORD_PARAMETER} If no password was provided.
     * @throws {ErrorCode.PASSWORD_TOO_SHORT} If the password is too short.
     * @throws {ErrorCode.PASSWORD_CONTAINS_ONLY_NUMBERS} If the password contains only numbers.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_SPECIAL_CHARACTER} If the password does not contain any special characters.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_UPPERCASE_LETTER} If the password does not contain any uppercase letters.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.EMAIL_ALREADY_EXISTS} If the email is already in use.
     * @throws {ErrorCode.MAIL_NOT_SENT} If the email could not be sent.
     * @throws {Error} If an unexpected error occurs.
     * */
    async register(email, password, name) {
        if (!this.remote) {
            throw new Error(AuthService.notInitializedErrorMessage);
        }
        return await this.remote.call("AuthService.register", email, password, name);
    }
    /**
     * @method login
     * @description Method that can be used to obtain a login token for a giving user.
     *
     * @param {string} email The user's email.
     * @param {string} password The user's password.
     * @returns {Promise<UserLoginResponse>} An object containing the user's information and the token.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.MISSING_EMAIL_PARAMETER} If no email was provided.
     * @throws {ErrorCode.INCORRECT_EMAIL_OR_PASSWORD} If the email or password is incorrect.
     * @throws {ErrorCode.EMAIL_NOT_VERIFIED} If the email is not confirmed.
     * @throws {Error} If an unexpected error occurs.
     * */
    async login(email, password) {
        if (!this.remote || !this.storage) {
            throw new Error(AuthService.notInitializedErrorMessage);
        }
        const response = await this.remote.call("AuthService.login", email, password);
        this.storage.setItem("token", response.token);
        return response;
    }
    /**
     * @method resetPassword
     * @description Sends a password reset token to a user's email.
     * @param {string} email - The user's email address.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.MISSING_EMAIL_PARAMETER} If no email was provided.
     * @throws {Error} If an unexpected error occurs.
     */
    async resetPassword(email) {
        if (!this.remote) {
            throw new Error(AuthService.notInitializedErrorMessage);
        }
        return await this.remote.call("AuthService.resetPassword", email);
    }
    /**
     * @method emailConfirmation
     * @description Confirms the user's email address. This method should be called after the user clicks on the link
     * received in the email.
     * @param {string} token - The token received in the email.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.INVALID_TOKEN} If the token is invalid.
     * @throws {Error} If an unexpected error occurs.
     */
    async emailConfirmation(token) {
        if (!this.remote) {
            throw new Error(AuthService.notInitializedErrorMessage);
        }
        return await this.remote.call("AuthService.emailConfirmation", token);
    }
    /**
     * @method resendEmailConfirmation
     * @description Resends the email confirmation email to the user.
     * @param {string} email
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If no email was provided.
     * @throws {ErrorCode.MAIL_NOT_SENT} If the email could not be sent.
     * @throws {Error} If an unexpected error occurs.
     */
    async resendEmailConfirmation(email) {
        if (!this.remote) {
            throw new Error(AuthService.notInitializedErrorMessage);
        }
        return await this.remote.call("AuthService.resendEmailConfirmation", email);
    }
    /**
     * @method resetPasswordConfirmation
     * @description Confirms the user's new password. This method should be called after the user clicks on the link
     * received in the email.
     * @param {string} token - The token received in the email.
     * @param {string} password - The new password.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.INVALID_TOKEN} If the token is invalid.
     * @throws {ErrorCode.PASSWORD_TOO_SHORT} If the password is too short.
     * @throws {ErrorCode.PASSWORD_CONTAINS_ONLY_NUMBERS} If the password contains only numbers.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_SPECIAL_CHARACTER} If the password does not contain any special characters.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_UPPERCASE_LETTER} If the password does not contain any uppercase letters.
     * @throws {Error} If an unexpected error occurs.
     */
    async resetPasswordConfirmation(token, password) {
        if (!this.remote) {
            throw new Error(AuthService.notInitializedErrorMessage);
        }
        return await this.remote.call("AuthService.resetPasswordConfirmation", token, password);
    }
    /**
     * @method googleRegistration
     * @description Method that can be used to obtain a login token for a giving user.
     *
     * @param {string} googleToken The user's Google token.
     * @returns {Promise<UserLoginResponse>} An object containing the user's information and the token.
     * @throws {ErrorCode.INVALID_TOKEN} If the Google token is incorrect.
     * @throws {Error} If an unexpected error occurs.
     */
    async googleRegistration(googleToken) {
        if (!this.remote || !this.storage) {
            throw new Error(AuthService.notInitializedErrorMessage);
        }
        const response = await this.remote.call("AuthService.googleRegistration", googleToken);
        this.storage.setItem("token", response.token);
        return response;
    }
    /**
     * @method userInfo
     * @description Method that can be used to obtain information about the user. It uses the token retrieved from storage.
     * @returns {Promise<User>} An object containing the user's information.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {GenezioErrorCodes.Unauthorized} If the user is not authorized.
     * @throws {Error} If an unexpected error occurs.
     */
    async userInfo() {
        if (!this.remote || !this.storage) {
            throw new Error(AuthService.notInitializedErrorMessage);
        }
        return await this.remote.call("AuthService.userInfo", this.storage.getItem("token"));
    }
    /**
     * @method userInfoForToken
     * @description Method that can be used to obtain information about the user.
     * @param {string} token The user's token.
     * @returns {Promise<User>} An object containing the user's information.
     * @throws {GenezioErrorCodes.Unauthorized} If the user is not authorized.
     * @throws {Error} If an unexpected error occurs.
     */
    async userInfoForToken(token) {
        if (!this.remote) {
            throw new Error(AuthService.notInitializedErrorMessage);
        }
        return await this.remote.call("AuthService.userInfo", token);
    }
    async logout() {
        if (!this.storage) {
            throw new Error(AuthService.notInitializedErrorMessage);
        }
        this.storage.removeItem("token");
    }
}
AuthService.notInitializedErrorMessage = "The AuthService class was not initialized. Call AuthService.getInstance().setTokenAndRegion(token, region) with the values provided in genezio dashboard. Check <link> for more information.";
AuthService.instance = null;
export { Remote };
